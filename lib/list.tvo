rec

:head ( list -- head )
  uncons pop
;

:tail ( list -- tail )
  uncons popd
;

:concat ( list list2 -- [*list *list2] )
  swap
  [null] [pop]
  [uncons swapd]
  [cons]
  linrec
;

:wrap ( ele list list2 -- [*list ele *list2] )
  swapd cons  concat
;

:reverse
  [null] []
  [uncons]
  [swap  list cons  concat]
  linrec
;

:map ( fn list -- list2 )
  swap
  [ [null] [] ] dip
  [uncons] [dip] wrap
  [cons]
  linrec
;

:fold ( aggr fn list -- v )
  swap
  [ [null] [pop] ] dip
  [uncons] [dip] wrap
  tailrec
;

:foldl fold ;

:foldr ( aggr fn list -- v )
  swap
  [ [null] [pop] [uncons swapd] ] dip
  linrec
;

:sum ( list -- sum )
  [ 0 [+] ] dip fold
;


