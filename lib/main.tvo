:swapd ( X Y Z -- Y X Z ) [swap] dip ;
:popd ( X Y -- Y ) [pop]  dip ;

:size ( -- n ) "stack << stack.size" eval ;

:zero ( n -- bool ) 0 = ;
:pred ( n -- n ) 1 - ;
:succ ( n -- n ) 1 + ;

:use ( str -- ) load export import pop ;

