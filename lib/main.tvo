:swapd ( X Y Z -- Y X Z ) [swap] dip ;
:popd ( X Y -- Y ) [pop] dip ;
:dupd ( X Y -- X X Y ) [dup] dip ;

:size ( -- n ) "stack << stack.size" eval ;

:with ( [code] -- )
  # `obj [.name] with` is equal to `obj dup [.name] dip`
  #
  # This is useful when you're accessing fields/methods:
  #   me  [.a] with  .b  +
  [dup] dip dip
;

:zero ( n -- bool ) 0 = ;
:pred ( n -- n ) 1 - ;
:succ ( n -- n ) 1 + ;

:use ( str -- ) load export import pop ;

